apply plugin: 'com.android.application'

//**CUSTOM TASKS**//

/**
 * Read password from console and store it to signing release config settings
 */
task readPasswordFromInput << {
    def console = System.console()
    ext.keystorePassword = console.readLine('\n\n\n> Enter keystore password: ')
    android.signingConfigs.release.storePassword = ext.keystorePassword
    android.signingConfigs.release.keyPassword = ext.keystorePassword
}

/**
 * Increase version code in config gradle.properties file
 */
task increaseVersionCode << {
    def versionPropFile = "../gradle.properties";
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(file(versionPropFile)))
    int versionCode = versionProps['mBuild'].toInteger()
    versionProps['mBuild'] = (versionCode + 1) + ""
    versionProps.store(new FileOutputStream(file(versionPropFile)), "Build properties")
    println 'increasing version code to ' + versionProps['mBuild']
}

/**
 * Get count of git commits
 */
def getGitCommits() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', 'HEAD', '--count'
        standardOutput = stdout
    }
    return Integer.parseInt(stdout.toString().trim())
}

/**
 * Read version code from standart input and store it inside gradle.properties config file
 */
task setVersionCode << {
    def versionPropFile = "../gradle.properties";
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(file(versionPropFile)))
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in))
    print "Input:"
    def userInput = br.readLine()
    versionProps['mBuild'] = userInput
    versionProps.store(new FileOutputStream(file(versionPropFile)), "Build properties")
    println 'increasing version code to ' + versionProps['mBuild']
}

/**
 * Copies mapping from build output folder into own output folder.
 * Caution: This task asumes that folder outputs and proguard exists and mapping is in sub sub folder of proguard folder. If anything changes in gradle build configuration, this task has to be updated
 */
task copyMapping << {
    copy {
        from(new File(new File(buildDir.getPath(), "outputs"), "mapping").listFiles()[0].listFiles()[0]) {
            include '**/mapping.txt'
        }
        into new File(projectDir.parent, "outputs")
        includeEmptyDirs = false
    }
    println "Proguard mapping copied"
}

/**
 * Initialize copy of mapping.txt after progurad task is performed
 */
gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task.name.startsWith("proguard")) {
        copyMapping.execute()
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    defaultConfig {
        applicationId project.mPackageName
        minSdkVersion 14
        targetSdkVersion 22
        versionCode getGitCommits()
        versionName project.mVersionName
        manifestPlaceholders = [appName: project.mAppName]
    }

    signingConfigs {

        release {
            keyAlias project.mKeyAlias
            storeFile file("../keystore/" + project.mKeyFile)
            storePassword project.mKeyPass
            keyPassword project.mKeyPass
        }


        debug {
            keyAlias "androiddebugkey"
            storeFile file("../keystore/debug.keystore")
            storePassword 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.dev'
            manifestPlaceholders = [appName: project.mAppName + " D"]

        }
        //beta build that is sent to hockeyapp for testing purposes
        beta {
            applicationIdSuffix '.beta'
            manifestPlaceholders = [appName: project.mAppName + " B " + defaultConfig.versionCode]

            signingConfig signingConfigs.debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant -> //Copy result apk to "outputs" folder in project root and rename it to App.apk
                def projectRoot = project.rootDir
                def outputs = new File(projectRoot, "outputs")
                outputs.mkdirs();
                variant.outputs.each { output ->
                    output.outputFile = new File(outputs, "App.apk")
                }
            }

        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }


    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'AndroidManifest.xml'
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:recyclerview-v7:22.2.1'
    compile 'com.google.maps.android:android-maps-utils:0.3.4'
    compile 'com.google.android.gms:play-services:6.5.+'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'com.squareup:otto:1.3.7'
    compile 'net.hockeyapp.android:HockeySDK:3.0.2'
    compile('com.lsjwzh:materialloadingprogressbar:0.5.5-RELEASE')
    compile 'com.github.bumptech.glide:glide:3.5.2'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'uk.co.chrisjenx:calligraphy:2.1.0'
    compile 'com.googlecode.libphonenumber:libphonenumber:3.1+'
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
